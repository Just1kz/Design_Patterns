Шаблон: Шаблонный метод (Template method) — это поведенческий паттерн, задающий скелет алгоритма в суперклассе и заставляющий
подклассы реализовать конкретные шаги этого алгоритма.
=======================================================================================================
Цель:

Определение основы класса и создание возможности подклассам переопределять его части

=======================================================================================================
Идея:
Паттерн Шаблонный метод предлагает разбить алгоритм на последовательность шагов, описать эти шаги в отдельных методах и вызывать
их в одном шаблонном методе друг за другом.

Это позволит подклассам переопределять некоторые шаги алгоритма, оставляя без изменений его структуру и остальные шаги, которые
для этого подкласса не так важны.

=======================================================================================================
Для чего используется:

Определяет основу класса и позволяет подклассам переопределять некоторые его части не изменяя его структуру в целом

=======================================================================================================
Пример использования:

- однократное использование различных частей класса, оставляя реализацию изменяющегося поведения на усмотрение подклассов
- вычленение и локализация общего для всех подклассов поведения в родительском
- управление расширениями подклассов

=======================================================================================================
Шаги реализации:
- Изучите алгоритм и подумайте, можно ли его разбить на шаги. Прикиньте, какие шаги будут стандартными для всех вариаций алгоритма,
а какие — изменяющимися.

- Создайте абстрактный базовый класс. Определите в нём шаблонный метод. Этот метод должен состоять из вызовов шагов алгоритма.
Имеет смысл сделать шаблонный метод финальным, чтобы подклассы не могли переопределить его (если ваш язык программирования
это позволяет).

- Добавьте в абстрактный класс методы для каждого из шагов алгоритма. Вы можете сделать эти методы абстрактными или добавить
какую-то реализацию по умолчанию. В первом случае все подклассы должны будут реализовать эти методы, а во втором — только если
реализация шага в подклассе отличается от стандартной версии.

- Подумайте о введении в алгоритм хуков. Чаще всего, хуки располагают между основными шагами алгоритма, а также до и после всех
шагов.

- Создайте конкретные классы, унаследовав их от абстрактного класса. Реализуйте в них все недостающие шаги и хуки.
=======================================================================================================
Преимущества и недостатки:
+ Облегчает повторное использование кода.
- Вы жёстко ограничены скелетом существующего алгоритма.
- Вы можете нарушить принцип подстановки Барбары Лисков, изменяя базовое поведение одного из шагов алгоритма через подкласс.
- С ростом количества шагов шаблонный метод становится слишком сложно поддерживать.
 =======================================================================================================