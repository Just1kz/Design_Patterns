Шаблон: Состояние (State) — это поведенческий паттерн, позволяющий динамически изменять поведение объекта при смене его состояния.
=======================================================================================================
Цель:

Управление поведением в зависимости от состояния

=======================================================================================================
Идея:
Установление связи между мэйн объектом и зависимыми путем хранения ссылок в мэйне и при изменении состояния мэйн объекта
уведомлять зависящие объекты

=======================================================================================================
Для чего используется:

Позволяет управлять поведением объекта в зависимости от внутреннего состояния

=======================================================================================================
Пример использования:

- поведение объекта зависит от его состояния и изменяется во время выполнения
- когда встречается большое количество условных операторов, когда выбор ветви зависит от состояния объекта

=======================================================================================================
Шаги реализации:
- Определитесь с классом, который будет играть роль контекста. Это может быть как существующий класс, в котором уже есть зависимость
от состояния, так и новый класс, если код состояний размазан по нескольким классам.

- Создайте общий интерфейс состояний. Он должен описывать методы, общие для всех состояний, обнаруженных в контексте. Заметьте, что
не всё поведение контекста нужно переносить в состояние, а только то, которое зависит от состояний.

- Для каждого фактического состояния создайте класс, реализующий интерфейс состояния. Переместите код, связанный с конкретными
состояниями в нужные классы. В конце концов, все методы интерфейса состояния должны быть реализованы во всех классах состояний.

- При переносе поведения из контекста вы можете столкнуться с тем, что это поведение зависит от приватных полей или методов контекста,
к которым нет доступа из объекта состояния. Существует парочка способов обойти эту проблему.

- Самый простой — оставить поведение внутри контекста, вызывая его из объекта состояния. С другой стороны, вы можете сделать классы
состояний вложенными в класс контекста, и тогда они получат доступ ко всем приватным частям контекста. Но последний способ доступен
только в некоторых языках программирования (например, Java, C#).

- Создайте в контексте поле для хранения объектов-состояний, а также публичный метод для изменения значения этого поля.

- Старые методы контекста, в которых находился зависимый от состояния код, замените на вызовы соответствующих методов
объекта-состояния.

- В зависимости от бизнес-логики, разместите код, который переключает состояние контекста либо внутри контекста, либо внутри классов
конкретных состояний.
=======================================================================================================
Преимущества и недостатки:
+ Избавляет от множества больших условных операторов машины состояний.
+ Концентрирует в одном месте код, связанный с определённым состоянием.
+ Упрощает код контекста.
- Может неоправданно усложнить код, если состояний мало и они редко меняются.
 =======================================================================================================