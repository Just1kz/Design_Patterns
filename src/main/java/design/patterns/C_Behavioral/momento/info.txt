Шаблон: Хранитель (Memento) — это поведенческий паттерн, позволяющий делать снимки внутреннего состояния объектов,
а затем восстанавливать их.
=======================================================================================================
Цель:

Сохранить внутренее состояние объекта за его пределы

=======================================================================================================
Идея:
Паттерн Посредник заставляет объекты общаться не напрямую друг с другом, а через отдельный объект-посредник, который знает, кому
нужно перенаправить тот или иной запрос. Благодаря этому, компоненты системы будут зависеть только от посредника,
а не от десятков других компонентов.

=======================================================================================================
Для чего используется:

Фиксирование внутреннего состояния объекта за его пределами не нарушая инкапсуляцию и восстановление объекта в случае необходимости

=======================================================================================================
Пример использования:

- необходимо сохранить текущее состояние объекта или его части и восстановление его в будущем, но прямое получение состояния
раскрывает детали реализации и нарушает инкапсуляцию объекта

=======================================================================================================
Шаги реализации:
- Определите класс создателя, объекты которого должны создавать снимки своего состояния.

- Создайте класс снимка и опишите в нём все те же поля, которые имеются в оригинальном классе-создателе.

- Сделайте объекты снимков неизменяемыми. Они должны получать начальные значения только один раз, через свой конструктор.

- Если ваш язык программирования это позволяет, сделайте класс снимка вложенным в класс создателя. Если нет, извлеките из класса снимка
пустой интерфейс, который будет доступен остальным объектам программы. Впоследствии вы можете добавить в этот интерфейс некоторые
вспомогательные методы, дающие доступ к метаданным снимка, однако прямой доступ к данным создателя должен быть исключён.

- Добавьте в класс создателя метод получения снимков. Создатель должен создавать новые объекты снимков, передавая значения своих
полей через конструктор.

- Сигнатура метода должна возвращать снимки через ограниченный интерфейс, если он у вас есть. Сам класс должен работать с конкретным
классом снимка.

- Добавьте в класс создателя метод восстановления из снимка. Что касается привязки к типам, руководствуйтесь той же логикой, что и в пункте 4.

- Опекуны, будь то история операций, объекты команд или нечто иное, должны знать о том, когда запрашивать снимки у создателя, где их
хранить и когда восстанавливать.

- Связь опекунов с создателями можно перенести внутрь снимков. В этом случае каждый снимок будет привязан к своему создателю и должен
будет сам восстанавливать его состояние. Но это будет работать либо если классы снимков вложены в классы создателей, либо если создатели
имеют соответствующие сеттеры для установки значений своих полей.

=======================================================================================================
Преимущества и недостатки:
+ Не нарушает инкапсуляции исходного объекта.
+ Упрощает структуру исходного объекта. Ему не нужно хранить историю версий своего состояния.
- Требует много памяти, если клиенты слишком часто создают снимки.
- Может повлечь дополнительные издержки памяти, если объекты, хранящие историю, не освобождают ресурсы, занятые устаревшими
снимками.
- В некоторых языках (например, PHP, Python, JavaScript) сложно гарантировать, чтобы только исходный объект имел доступ к состоянию
снимка.
 =======================================================================================================