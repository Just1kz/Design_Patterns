Шаблон: Итератор (Iterator) — это поведенческий паттерн, позволяющий последовательно обходить сложную коллекцию,
без раскрытия деталей её реализации.
=======================================================================================================
Цель:

Последовательное получение доступа ко всем элементам составного объектам

=======================================================================================================
Идея:
Идея паттерна Итератор состоит в том, чтобы вынести поведение обхода коллекции из самой коллекции в отдельный класс.

Объект-итератор будет отслеживать состояние обхода, текущую позицию в коллекции и сколько элементов ещё осталось обойти.
Одну и ту же коллекцию смогут одновременно обходить различные итераторы, а сама коллекция не будет даже знать об этом.

К тому же, если вам понадобится добавить новый способ обхода, вы сможете создать отдельный класс итератора, не изменяя существующий
код коллекции.

=======================================================================================================
Для чего используется:

- Когда у вас есть сложная структура данных, и вы хотите скрыть от клиента детали её реализации (из-за сложности или вопросов безопасности).
- Когда вам нужно иметь несколько вариантов обхода одной и той же структуры данных.
- Когда вам хочется иметь единый интерфейс обхода различных структур данных.

=======================================================================================================
Пример использования:

- различные виды обхода составного объекта
- упрощенный доступ к составному объекту

=======================================================================================================
Шаги реализации:
- Создайте общий интерфейс итераторов. Обязательный минимум — это операция получения следующего элемента коллекции.
Но для удобства можно предусмотреть и другое. Например, методы для получения предыдущего элемента, текущей позиции,
проверки окончания обхода и прочие.

- Создайте интерфейс коллекции и опишите в нём метод получения итератора. Важно, чтобы сигнатура метода возвращала общий интерфейс
итераторов, а не один из конкретных итераторов.

- Создайте классы конкретных итераторов для тех коллекций, которые нужно обходить с помощью паттерна. Итератор должен быть привязан
только к одному объекту коллекции. Обычно эта связь устанавливается через конструктор.

- Реализуйте методы получения итератора в конкретных классах коллекций. Они должны создавать новый итератор того класса, который
способен работать с данным типом коллекции. Коллекция должна передавать ссылку на собственный объект в конструктор итератора.

- В клиентском коде и в классах коллекций не должно остаться кода обхода элементов. Клиент должен получать новый итератор из объекта
коллекции каждый раз, когда ему нужно перебрать её элементы.

=======================================================================================================
Преимущества и недостатки:
+ Упрощает классы хранения данных.
+ Позволяет реализовать различные способы обхода структуры данных.
+ Позволяет одновременно перемещаться по структуре данных в разные стороны.
- Не оправдан, если можно обойтись простым циклом.

 =======================================================================================================