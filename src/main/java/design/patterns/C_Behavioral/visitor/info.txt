Шаблон: Посетитель (Visitor) — это поведенческий паттерн, который позволяет добавить новую операцию для целой иерархии классов,
не изменяя код этих классов.
=======================================================================================================
Цель:

Описание действий, которые выполняются с каждым объектом в некоторой структуре

=======================================================================================================
Идея:
Паттерн Посетитель предлагает разместить новое поведение в отдельном классе, вместо того чтобы множить его сразу в нескольких классах.
Объекты, с которыми должно было быть связано поведение, не будут выполнять его самостоятельно. Вместо этого вы будете передавать эти
объекты в методы посетителя.

=======================================================================================================
Для чего используется:

Определяет основу класса и позволяет подклассам переопределять некоторые его части не изменяя его структуру в целом

=======================================================================================================
Пример использования:

- в структуре присутствуют объекты многих классов с различными интерфейсами и необходимо выполнить над ними операции, которые
зависят от конкретных классов
- необходимо выполнять не связанные между собой операции над объектами, которые входят в состав структуры и мы не хотим добавлять
эти операции в классы
- классы, которые устанавливают структуру объектов редко изменяются, но часто добавляются новые операции над этой структурой

=======================================================================================================
Шаги реализации:
- Создайте интерфейс посетителя и объявите в нём методы «посещения» для каждого класса элемента, который существует в программе.

- Опишите интерфейс элементов. Если вы работаете с уже существующими классами, то объявите абстрактный метод принятия посетителей
в базовом классе иерархии элементов.

- Реализуйте методы принятия во всех конкретных элементах. Они должны переадресовывать вызовы тому методу посетителя, в котором тип
параметра совпадает с текущим классом элемента.

- Иерархия элементов должна знать только о базовом интерфейсе посетителей. С другой стороны, посетители будут знать обо всех классах
элементов.

- Для каждого нового поведения создайте конкретный класс посетителя. Приспособьте это поведение для работы со всеми типами элементов,
реализовав все методы интерфейса посетителей.

- Вы можете столкнуться с ситуацией, когда посетителю нужен будет доступ к приватным полям элементов. В этом случае вы можете либо
раскрыть доступ к этим полям, нарушив инкапсуляцию элементов, либо сделать класс посетителя вложенным в класс элемента, если вам
повезло писать на языке, который поддерживает вложенность классов.

- Клиент будет создавать объекты посетителей, а затем передавать их элементам, используя метод принятия.
=======================================================================================================
Преимущества и недостатки:
+ Упрощает добавление операций, работающих со сложными структурами объектов.
+ Объединяет родственные операции в одном классе.
+ Посетитель может накапливать состояние при обходе структуры элементов.
- Паттерн не оправдан, если иерархия элементов часто меняется.
- Может привести к нарушению инкапсуляции элементов.
 =======================================================================================================