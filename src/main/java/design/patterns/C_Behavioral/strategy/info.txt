Шаблон: Стратегия (Strategy) — это поведенческий паттерн, выносит набор алгоритмов в собственные классы и делает их взаимозаменимыми.
=======================================================================================================
Цель:

Взаимозаменяемость семейства классов

=======================================================================================================
Идея:
Паттерн Стратегия предлагает определить семейство схожих алгоритмов, которые часто изменяются или расширяются, и вынести их в
собственные классы, называемые стратегиями.

Вместо того, чтобы изначальный класс сам выполнял тот или иной алгоритм, он будет играть роль контекста, ссылаясь на одну из стратегий
и делегируя ей выполнение работы. Чтобы сменить алгоритм, вам будет достаточно подставить в контекст другой объект-стратегию.

Важно, чтобы все стратегии имели общий интерфейс. Используя этот интерфейс, контекст будет независимым от конкретных классов
стратегий. С другой стороны, вы сможете изменять и добавлять новые виды алгоритмов, не трогая код контекста.

=======================================================================================================
Для чего используется:

Определение семейства классов, инкапсулирование каждого из нихи организация их взаимозаменяемости

=======================================================================================================
Пример использования:

- есть несколько родственных классов, которые отличаются поведением
- необходимо ииметь несколько вариантов поведения
- в классе есть данные, о которых не должен знать клиент
- с помощью условных операторов в классе определено большое количество возможных поведений

=======================================================================================================
Шаги реализации:
- Определите алгоритм, который подвержен частым изменениям. Также подойдёт алгоритм, имеющий несколько вариаций, которые
выбираются во время выполнения программы.

- Создайте интерфейс стратегий, описывающий этот алгоритм. Он должен быть общим для всех вариантов алгоритма.

- Поместите вариации алгоритма в собственные классы, которые реализуют этот интерфейс.

- В классе контекста создайте поле для хранения ссылки на текущий объект-стратегию, а также метод для её изменения. Убедитесь в том,
что контекст работает с этим объектом только через общий интерфейс стратегий.

- Клиенты контекста должны подавать в него соответствующий объект-стратегию, когда хотят, чтобы контекст вёл себя определённым
образом.
=======================================================================================================
Преимущества и недостатки:
+ Горячая замена алгоритмов на лету.
+ Изолирует код и данные алгоритмов от остальных классов.
+ Уход от наследования к делегированию.
+ Реализует принцип открытости/закрытости.
- Усложняет программу за счёт дополнительных классов.
- Клиент должен знать, в чём состоит разница между стратегиями, чтобы выбрать подходящую.
 =======================================================================================================