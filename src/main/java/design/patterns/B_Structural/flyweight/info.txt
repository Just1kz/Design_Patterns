Шаблон: Легковес (Flyweight) - это структурный паттерн, который экономит память, благодаря разделению общего состояния,
вынесенного в один объект, между множеством объектов.
=======================================================================================================
Цель:

Поддержка множества мелких объектов

=======================================================================================================
Для чего используется:

Использует разделение для того, чтобы поддерживать много мелких объектов

Неизменяемые данные объекта принято называть «внутренним состоянием». Все остальные данные — это «внешнее состояние».

Паттерн Легковес предлагает не хранить в классе внешнее состояние, а передавать его в те или иные методы через параметры.
Таким образом, одни и те же объекты можно будет повторно использовать в различных контекстах. Но главное — понадобится гораздо
меньше объектов, ведь теперь они будут отличаться только внутренним состоянием, а оно имеет не так много вариаций.

=======================================================================================================

 Эффективность паттерна Легковес во многом зависит от того, как и где он используется. Применяйте этот паттерн, когда выполнены все перечисленные условия:

в приложении используется большое число объектов;
из-за этого высоки расходы оперативной памяти;
большую часть состояния объектов можно вынести за пределы их классов;
большие группы объектов можно заменить относительно небольшим количеством разделяемых объектов, поскольку внешнее состояние вынесено.

=======================================================================================================
Пример использования:

- когда используется большое число объектов
- большую часть состояния можно вынести наружу - не дублируя данные экономя память
- приложение не зависит от идентичности объектов

=======================================================================================================
Шаги реализации:

- Разделите поля класса, который станет легковесом, на две части:

 --внутреннее состояние: значения этих полей одинаковы для большого числа объектов;
 --внешнее состояние (контекст): значения полей уникальны для каждого объекта.

 - Оставьте поля внутреннего состояния в классе, но убедитесь, что их значения неизменяемы. Эти поля должны инициализироваться только через конструктор.

 - Превратите поля внешнего состояния в параметры методов, где эти поля использовались. Затем удалите поля из класса.

 - Создайте фабрику, которая будет кешировать и повторно отдавать уже созданные объекты. Клиент должен запрашивать из этой фабрики легковеса с определённым внутренним состоянием, а не создавать его напрямую.

 - Клиент должен хранить или вычислять значения внешнего состояния (контекст) и передавать его в методы объекта легковеса.

=======================================================================================================
Преимущества и недостатки:
+ Экономит оперативную память.

- Расходует процессорное время на поиск/вычисление контекста.
- Усложняет код программы из-за введения множества дополнительных классов.

 =======================================================================================================