Шаблон: Мост (Bridge) - это структурный паттерн, который разделяет бизнес-логику или большой класс на несколько отдельных иерархий,
которые потом можно развивать отдельно друг от друга.
=======================================================================================================
Цель:

Отделить абстракцию от её реализации таким образом, чтобы мы могли изменять независимо друг от друга и то и другое

=======================================================================================================
Для чего используется:

Для получения приемуществ наследования без потери гибкости - связь между сущностями устанавливается на уровне абстракций
(абстрактный класс + интерфейс) через поле + инициализация - конструктор.

=======================================================================================================
Пример использования:

- предотвращение жетской привязки абстракции к реализации (например реализацию можно выбрать во время исполнения программы);
- в будущем мы хотим расширять с помощью подклассов и реализацию и абстракцию;
- если изменения в реализации не должны отражатся на клиентах абстракции
- для разделения одной реализации между несколькими объектами и не показывать это клиенту

=======================================================================================================
Шаги реализации:
- Определите, существует ли в ваших классах два непересекающихся измерения. Это может быть функциональность/платформа,
предметная-область/инфраструктура, фронт-энд/бэк-энд или интерфейс/реализация.

- Продумайте, какие операции будут нужны клиентам, и опишите их в базовом классе абстракции.

- Определите поведения, доступные на всех платформах, и выделите из них ту часть, которая нужна абстракции. На основании этого опишите
общий интерфейс реализации.

- Для каждой платформы создайте свой класс конкретной реализации. Все они должны следовать общему интерфейсу, который мы выделили
перед этим.

- Добавьте в класс абстракции ссылку на объект реализации. Реализуйте методы абстракции, делегируя основную работу связанному объекту
реализации.

- Если у вас есть несколько вариаций абстракции, создайте для каждой из них свой подкласс.

- Клиент должен подать объект реализации в конструктор абстракции, чтобы связать их воедино. После этого он может свободно использовать
объект абстракции, забыв о реализации.

=======================================================================================================
Преимущества и недостатки:
+ Позволяет строить платформо-независимые программы.
+ Скрывает лишние или опасные детали реализации от клиентского кода.
+ Реализует принцип открытости/закрытости.

 - Усложняет код программы из-за введения дополнительных классов.

 =======================================================================================================