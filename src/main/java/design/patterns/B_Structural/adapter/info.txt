Шаблон: Адаптер (Adapter) - это структурный паттерн, который позволяет подружить несовместимые объекты.
=======================================================================================================
Цель:

Преобразование интерфейса одного класса в интерфейс того класса, который необходим клиенту

=======================================================================================================
Для чего используется:

Для обеспечения совместной работы классов, интерфейсы которых не совместимы

=======================================================================================================
Пример использования:

- интерфейс класса, который мы хотим использовать не соответствует нашим потребностям;
- необходим класс, который должен взаимодействовать с классами, которые ему неизвестны или не связаны с ним;
- необходимо использовать несколько существующих подклассов, но нецелесообразно использовать методы этих классов создавая их новые
подклассы

=======================================================================================================
Шаги реализации:
- Убедитесь, что у вас есть два класса с несовместимыми интерфейсами:
    - полезный сервис — служебный класс, который вы не можете изменять (он либо сторонний, либо от него зависит другой код);
    - один или несколько клиентов — существующих классов приложения, несовместимых с сервисом из-за неудобного или несовпадающего
    интерфейса.

- Опишите клиентский интерфейс, через который классы приложения смогли бы использовать класс сервиса.

- Создайте класс адаптера, реализовав этот интерфейс.

- Поместите в адаптер поле, которое будет хранить ссылку на объект сервиса. Обычно это поле заполняют объектом, переданным в конструктор
адаптера. В случае простой адаптации этот объект можно передавать через параметры методов адаптера.

- Реализуйте все методы клиентского интерфейса в адаптере. Адаптер должен делегировать основную работу сервису.

- Приложение должно использовать адаптер только через клиентский интерфейс. Это позволит легко изменять и добавлять адаптеры в будущем.

=======================================================================================================
Преимущества и недостатки:
 + Отделяет и скрывает от клиента подробности преобразования различных интерфейсов.

 - Усложняет код программы из-за введения дополнительных классов.

 =======================================================================================================