Шаблон: Прототип (Prototype)
=======================================================================================================
Цель:

Определить вид создаваемых объектов с помощью экземпляра - прототипа и создавать новые объекты, копируя
этот прототип.
=======================================================================================================
Для чего используется:

Для создания копий заданного объекта

=======================================================================================================
Пример использования:

- классы, экземпляры которых необходимо создать определяются во время выполнения программы;
- для избежания построения иерархии классов, фабрик или параллельных иерархий классов;
- экземпляры класса могут находиться в одном из немногих возможных состояний

=======================================================================================================
Шаги реализации:
- Создайте интерфейс прототипов с единственным методом clone. Если у вас уже есть иерархия продуктов,
метод клонирования можно объявить непосредственно в каждом из её классов.

- Добавьте в классы будущих прототипов альтернативный конструктор, принимающий в качестве аргумента
объект текущего класса. Этот конструктор должен скопировать из поданного объекта значения всех полей,
объявленных в рамках текущего класса, а затем передать выполнение родительскому конструктору, чтобы тот
позаботился о полях, объявленных в суперклассе.

- Если ваш язык программирования не поддерживает перегрузку методов, то вам не удастся создать несколько
версий конструктора. В этом случае копирование значений можно проводить и в другом методе, специально
созданном для этих целей. Конструктор удобнее тем, что позволяет клонировать объект за один вызов.

- Метод клонирования обычно состоит всего из одной строки: вызова оператора new с конструктором прототипа.
Все классы, поддерживающие клонирование, должны явно определить метод clone, чтобы использовать собственный
класс с оператором new. В обратном случае результатом клонирования станет объект родительского класса.

- Опционально, создайте центральное хранилище прототипов. В нём удобно хранить вариации объектов, возможно,
даже одного класса, но по-разному настроенных.

- Вы можете разместить это хранилище либо в новом фабричном классе, либо в фабричном методе базового класса
прототипов. Такой фабричный метод должен на основании входящих аргументов искать в хранилище прототипов
подходящий экземпляр, а затем вызывать его метод клонирования и возвращать полученный объект.

- Наконец, нужно избавиться от прямых вызовов конструкторов объектов, заменив их вызовами фабричного метода
хранилища прототипов.

=======================================================================================================
Преимущества и недостатки:
 + Позволяет клонировать объекты, не привязываясь к их конкретным классам.
 + Меньше повторяющегося кода инициализации объектов.
 + Ускоряет создание объектов.
 + Альтернатива созданию подклассов для конструирования сложных объектов.

 - Сложно клонировать составные объекты, имеющие ссылки на другие объекты.

 =======================================================================================================